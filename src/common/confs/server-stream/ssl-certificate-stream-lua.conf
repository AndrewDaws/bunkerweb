ssl_certificate /var/cache/bunkerweb/default-server-cert/cert.pem;
ssl_certificate_key /var/cache/bunkerweb/default-server-cert/cert.key;
ssl_protocols {{ SSL_PROTOCOLS }};
ssl_prefer_server_ciphers on;
ssl_session_tickets off;
ssl_session_timeout 1d;
ssl_session_cache shared:MozSSL:10m;
{% if "TLSv1.2" in SSL_PROTOCOLS +%}
ssl_dhparam /etc/nginx/dhparam;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
{% endif %}

{% if AUTO_LETS_ENCRYPT == "yes" or USE_CUSTOM_SSL == "yes" or GENERATE_SELF_SIGNED_SSL == "yes" %}
listen 0.0.0.0:{{ LISTEN_STREAM_PORT_SSL }} ssl {% if USE_UDP == "yes" %} udp {% endif %}{% if USE_PROXY_PROTOCOL == "yes" %} proxy_protocol {% endif %};
{% if USE_IPV6 == "yes" +%}
listen [::]:{{ LISTEN_STREAM_PORT_SSL }} ssl {% if USE_UDP == "yes" %} udp {% endif %}{% if USE_PROXY_PROTOCOL == "yes" %} proxy_protocol {% endif %};
{% endif %}
{% endif %}

ssl_certificate_by_lua_block {
	local class         = require "middleclass"
	local clogger       = require "bunkerweb.logger"
	local helpers       = require "bunkerweb.helpers"
	local utils         = require "bunkerweb.utils"
	local cdatastore    = require "bunkerweb.datastore"
	local cclusterstore = require "bunkerweb.clusterstore"
	local cjson         = require "cjson"
	local ssl			= require "ngx.ssl"

	-- Start ssl_certificate phase
	local logger    = clogger:new("SSL-CERTIFICATE")
	local datastore = cdatastore:new()
	logger:log(ngx.INFO, "ssl_certificate phase started")

	-- Get plugins order
	local order, err = datastore:get("plugins_order", true)
	if not order then
		logger:log(ngx.ERR, "can't get plugins order from datastore : " .. err)
		return
	end

	-- Call ssl_certificate() methods
	logger:log(ngx.INFO, "calling ssl_certificate() methods of plugins ...")
	for i, plugin_id in ipairs(order.ssl_certificate) do
		-- Require call
		local plugin_lua, err = helpers.require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ngx.ERR, err)
		elseif plugin_lua == nil then
			logger:log(ngx.INFO, err)
		else
			-- Check if plugin has ssl_certificate method
			if plugin_lua.ssl_certificate ~= nil then
				-- New call
				local ok, plugin_obj = helpers.new_plugin(plugin_lua)
				if not ok then
					logger:log(ngx.ERR, plugin_obj)
				else
					local ok, ret = helpers.call_plugin(plugin_obj, "ssl_certificate")
					if not ok then
						logger:log(ngx.ERR, ret)
					elseif not ret.ret then
						logger:log(ngx.ERR, plugin_id .. ":ssl_certificate() call failed : " .. ret.msg)
					else
						logger:log(ngx.INFO, plugin_id .. ":ssl_certificate() call successful : " .. ret.msg)
						if ret.status then
							logger:log(ngx.INFO, plugin_id .. " is setting certificate/key : " .. ret.msg)
							local ok, err = ssl.set_cert(ret.status[1])
							if not ok then
								logger:log(ngx.ERR, "error while setting certificate : " .. err)
							else
								local ok, err = ssl.set_priv_key(ret.status[2])
								if not ok then
									logger:log(ngx.ERR, "error while setting private key : " .. err)
								else
									return true
								end
							end
						end
					end
				end
			else
				logger:log(ngx.INFO, "skipped execution of " .. plugin_id .. " because method ssl_certificate() is not defined")
			end
		end
	end
	logger:log(ngx.INFO, "called ssl_certificate() methods of plugins")

	logger:log(ngx.INFO, "ssl_certificate phase ended")

	return true
}
