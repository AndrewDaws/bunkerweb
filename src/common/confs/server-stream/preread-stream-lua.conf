preread_by_lua_block {

local logger	= require "logger"
local datastore	= require "datastore"
local plugins	= require "plugins"
local utils		= require "utils"

logger.log(ngx.INFO, "PREREAD", "Preread phase started")

-- Process bans as soon as possible
local banned, err = datastore:get("bans_ip_" .. ngx.var.remote_addr)
if banned then
	logger.log(ngx.WARN, "PREREAD", "IP " .. ngx.var.remote_addr .. " is banned with reason : " .. banned)
	ngx.exit(utils.get_deny_status(true))
end
-- Redis case
local use_redis	= utils.get_variable("USE_REDIS")
if use_redis == "yes" then
	-- Connect
	local redis_client, err = clusterstore:connect()
	if not redis_client then
		logger.log(ngx.ERR, "PREREAD", "can't connect to redis server : " .. err)
	else
		-- Get ban
		local ban, err = redis_client:get("ban_" .. ngx.var.remote_addr)
		if err then
			logger.log(ngx.ERR, "PREREAD", "GET failed : " .. err)
		elseif ban then
			-- Get TTL
			local ttl, err = redis_client:ttl("ban_" .. ngx.var.remote_addr)
			if not ttl then
				logger.log(ngx.ERR, "PREREAD", "TTL failed : " .. err)
			else
				local ok, err = datastore:set("bans_ip_" .. ip, ban, ttl)
				if not ok then
					logger.log(ngx.ERR, "PREREAD", "can't save ban to the datastore : " .. err)
					return
				end
			end
		end
		redis_client:close()
	end
end

-- List all plugins
local list, err = plugins:list()
if not list then
	logger.log(ngx.ERR, "PREREAD", "Can't list loaded plugins : " .. err)
	list = {}
end

-- Call preread method of plugins
for i, plugin in ipairs(list) do
	local ret, plugin_lua = pcall(require, plugin.id .. "/" .. plugin.id)
	if ret then
		local plugin_obj = plugin_lua.new()
		if plugin_obj.preread ~= nil then
			logger.log(ngx.INFO, "PREREAD", "Executing preread() of " .. plugin.id)
			local ok, err, ret, value = plugin_obj:preread()
			if not ok then
				logger.log(ngx.ERR, "PREREAD", "Error while calling preread() on plugin " .. plugin.id .. " : " .. err)
			else
				logger.log(ngx.INFO, "PREREAD", "Return value from " .. plugin.id .. ".preread() is : " .. err)
			end
			if ret then
				if type(value) == "number" then
					if value == utils.get_deny_status(true) then
						logger.log(ngx.WARN, "PREREAD", "Denied access from " .. plugin.id .. " : " .. err)
						ngx.var.reason = plugin.id
					else
						logger.log(ngx.NOTICE, "PREREAD", plugin.id .. " returned status " .. tostring(value) .. " : " .. err)
					end
					return ngx.exit(value)
				else
					return value
				end
			end
		else
			logger.log(ngx.INFO, "PREREAD", "preread() method not found in " .. plugin.id .. ", skipped execution")
		end
	end
end

logger.log(ngx.INFO, "PREREAD", "Preread phase ended")

}