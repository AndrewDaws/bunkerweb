preread_by_lua_block {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local utils			= require "bunkerweb.utils"
local cdatastore	= require "bunkerweb.datastore"
local cclusterstore	= require "bunkerweb.clusterstore"
local cjson			= require "cjson"

-- Start preread phase
local logger = clogger:new("PREREAD")
local datastore = cdatastore:new()
logger:log(ngx.INFO, "preread phase started")

-- Fill ctx
logger:log(ngx.INFO, "filling ngx.ctx ...")
local ok, ret, errors = helpers.fill_ctx()
if not ok then
	logger:log(ngx.ERR, "fill_ctx() failed : " .. ret)
elseif errors then
	for i, error in ipairs(errors) do
		logger:log(ngx.ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
	end
end
logger:log(ngx.INFO, "ngx.ctx filled (ret = " .. ret .. ")")

-- Process bans as soon as possible
local banned, reason, ttl = utils.is_banned(ngx.ctx.bw.remote_addr)
if banned == nil then
	logger:log(ngx.ERR, "can't check if IP " .. ngx.ctx.bw.remote_addr .. " is banned : " .. reason)
elseif banned then
	logger:log(ngx.WARN, "IP " .. ngx.ctx.bw.remote_addr .. " is banned with reason " .. reason .. " (" .. tostring(ttl) .. "s remaining)")
	return ngx.exit(utils.get_deny_status())
else
	logger:log(ngx.INFO, "IP " .. ngx.ctx.bw.remote_addr .. " is not banned")
end

-- Get plugins
local plugins, err = datastore:get("plugins")
if not plugins then
	logger:log(ngx.ERR, "can't get plugins from datastore : " .. err)
	return false
end
plugins = cjson.decode(plugins)

-- Call preread() methods
logger:log(ngx.INFO, "calling preread() methods of plugins ...")
local status = nil
for i, plugin in ipairs(plugins) do
	-- Require call
	local plugin_lua, err = helpers.require_plugin(plugin.id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	elseif plugin_lua == nil then
		logger:log(ngx.INFO, err)
	else
		-- Check if plugin has preread method
		if plugin_lua.preread ~= nil then
			-- New call
			local ok, plugin_obj = helpers.new_plugin(plugin_lua)
			if not ok then
				logger:log(ngx.ERR, plugin_obj)
			else
				local ok, ret = helpers.call_plugin(plugin_obj, "preread")
				if not ok then
					logger:log(ngx.ERR, ret)
				elseif not ret.ret then
					logger:log(ngx.ERR, plugin.id .. ":preread() call failed : " .. ret.msg)
				else
					logger:log(ngx.INFO, plugin.id .. ":preread() call successful : " .. ret.msg)
				end
				if ret.status then
					if ret.status == utils.get_deny_status() then
						ngx.ctx.reason = plugin.id
						logger:log(ngx.WARN, "denied access from " .. plugin.id .. " : " .. ret.msg)
					else
						logger:log(ngx.NOTICE, plugin.id .. " returned status " .. tostring(ret.status) .. " : " .. ret.msg)
					end
					status = ret.status
					break
				end
			end
		else
			logger:log(ngx.INFO, "skipped execution of " .. plugin.id .. " because method preread() is not defined")
		end
	end
end
logger:log(ngx.INFO, "called preread() methods of plugins")

logger:log(ngx.INFO, "preread phase ended")

-- Return status if needed
if status then
	return ngx.exit(status)
end

return true

}