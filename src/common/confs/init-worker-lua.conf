lua_shared_dict ready_lock 16k;

init_worker_by_lua_block {

-- Our timer function
local ready_log = function(premature)
	-- Instantiate objects
	local logger = require "bunkerweb.logger":new("INIT")
	local datastore = require "bunkerweb.datastore":new()
	-- Don't print the ready log if we are in loading state
	local is_loading, err = require "bunkerweb.utils".get_variable("IS_LOADING", false)
	if not is_loading then
		logger:log(ngx.ERR, "utils.get_variable() failed : " .. err)
		return
	elseif is_loading == "yes" then
		return
	end
	-- Instantiate lock
	local lock = require "resty.lock":new("ready_lock")
	if not lock then
		logger:log(ngx.ERR, "lock:new() failed : " .. err)
		return
	end
	-- Acquire lock
	local elapsed, err = lock:lock("ready")
	if elapsed == nil then
		logger:log(ngx.ERR, "lock:lock() failed : " .. err)
	else
		-- Display ready log
		local ok, err = datastore:get("misc_ready")
		if not ok and err ~= "not found" then
			logger:log(ngx.ERR, "datastore:get() failed : " .. err)
		elseif not ok and err == "not found" then
			logger:log(ngx.NOTICE, "BunkerWeb is ready to fool hackers ! ðŸš€")
			local ok, err = datastore:set("misc_ready", "ok")
			if not ok then
				logger:log(ngx.ERR, "datastore:set() failed : " .. err)
			end
		end
	end
	-- Release lock
	lock:unlock()
end

-- Start timer
ngx.timer.at(5, ready_log)

}
