lua_shared_dict worker_lock 16k;

init_worker_by_lua_block {

-- Our timer function
local ready_work = function(premature)

	-- Libs
	local helpers = require "bunkerweb.helpers"
	local cjson = require "cjson"

	-- Instantiate objects
	local logger = require "bunkerweb.logger":new("INIT-WORKER")
	local datastore = require "bunkerweb.datastore":new()

	-- Don't go further we are in loading state
	local is_loading, err = require "bunkerweb.utils".get_variable("IS_LOADING", false)
	if not is_loading then
		logger:log(ngx.ERR, "utils.get_variable() failed : " .. err)
		return
	elseif is_loading == "yes" then
		return
	end

	-- Instantiate lock
	local lock = require "resty.lock":new("worker_lock")
	if not lock then
		logger:log(ngx.ERR, "lock:new() failed : " .. err)
		return
	end

	-- Acquire lock
	local elapsed, err = lock:lock("ready")
	if elapsed == nil then
		logger:log(ngx.ERR, "lock:lock() failed : " .. err)
		return
	end

	-- Check if work is done
	local ok, err = datastore:get("misc_ready")
	if not ok and err ~= "not found" then
		logger:log(ngx.ERR, "datastore:get() failed : " .. err)
		local ok, err = lock:unlock()
		if not ok then
			logger:log(ngx.ERR, "lock:unlock() failed : " .. err)
		end
		return
	end
	if ok then
		local ok, err = lock:unlock()
		if not ok then
			logger:log(ngx.ERR, "lock:unlock() failed : " .. err)
		end
		return
	end

	logger:log(ngx.INFO, "init_worker phase started")

	-- Get plugins order
	local order, err = datastore:get("plugins_order")
	if not order then
		logger:log(ngx.ERR, "can't get plugins order from datastore : " .. err)
		local ok, err = lock:unlock()
		if not ok then
			logger:log(ngx.ERR, "lock:unlock() failed : " .. err)
		end
		return
	end
	order = cjson.decode(order)

	-- Call init_worker() methods
	logger:log(ngx.INFO, "calling init_worker() methods of plugins ...")
	for i, plugin_id in ipairs(order.init_worker) do
		-- Require call
		local plugin_lua, err = helpers.require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ngx.ERR, err)
		elseif plugin_lua == nil then
			logger:log(ngx.INFO, err)
		else
			-- Check if plugin has init_worker method
			if plugin_lua.init_worker ~= nil then
				-- New call
				local ok, plugin_obj = helpers.new_plugin(plugin_lua)
				if not ok then
					logger:log(ngx.ERR, plugin_obj)
				else
					local ok, ret = helpers.call_plugin(plugin_obj, "init_worker")
					if not ok then
						logger:log(ngx.ERR, ret)
					elseif not ret.ret then
						logger:log(ngx.ERR, plugin_id .. ":init_worker() call failed : " .. ret.msg)
					else
						logger:log(ngx.INFO, plugin_id .. ":init_worker() call successful : " .. ret.msg)
					end
				end
			else
				logger:log(ngx.INFO, "skipped execution of " .. plugin_id .. " because method init_worker() is not defined")
			end
		end
	end
	logger:log(ngx.INFO, "called init_worker() methods of plugins")

	-- End
	local ok, err = datastore:set("misc_ready", "ok")
	if not ok then
		logger:log(ngx.ERR, "datastore:set() failed : " .. err)
	end
	local ok, err = lock:unlock()
	if not ok then
		logger:log(ngx.ERR, "lock:unlock() failed : " .. err)
	end
	logger:log(ngx.INFO, "init phase ended")
	logger:log(ngx.NOTICE, "BunkerWeb is ready to fool hackers ! ðŸš€")

end

-- Start timer
ngx.timer.at(5, ready_work)

}
