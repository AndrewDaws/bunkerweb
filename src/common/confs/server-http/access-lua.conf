access_by_lua_block {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local utils			= require "bunkerweb.utils"
local cdatastore	= require "bunkerweb.datastore"
local cclusterstore	= require "bunkerweb.clusterstore"
local cjson			= require "cjson"

-- Don't process internal requests
local logger = clogger:new("ACCESS")
if ngx.req.is_internal() then
	logger:log(ngx.INFO, "skipped access phase because request is internal")
	return true
end

-- Start access phase
local datastore = cdatastore:new()
logger:log(ngx.INFO, "access phase started")

-- Fill ctx
logger:log(ngx.INFO, "filling ngx.ctx ...")
local ok, ret, errors, ctx = helpers.fill_ctx()
if not ok then
	logger:log(ngx.ERR, "fill_ctx() failed : " .. ret)
elseif errors then
	for i, error in ipairs(errors) do
		logger:log(ngx.ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
	end
end
logger:log(ngx.INFO, "ngx.ctx filled (ret = " .. ret .. ")")

-- Process bans as soon as possible
if ctx.bw.is_whitelisted ~= "yes" then
	local banned, reason, ttl = utils.is_banned(ctx.bw.remote_addr)
	if banned == nil then
		logger:log(ngx.ERR, "can't check if IP " .. ctx.bw.remote_addr .. " is banned : " .. reason)
	elseif banned then
		logger:log(ngx.WARN, "IP " .. ctx.bw.remote_addr .. " is banned with reason " .. reason .. " (" .. tostring(ttl) .. "s remaining)")
		return ngx.exit(utils.get_deny_status(ctx))
	else
		logger:log(ngx.INFO, "IP " .. ctx.bw.remote_addr .. " is not banned")
	end
end

-- Get plugins order
local order, err = datastore:get("plugins_order", true)
if not order then
	logger:log(ngx.ERR, "can't get plugins order from datastore : " .. err)
	return
end

-- Call access() methods
logger:log(ngx.INFO, "calling access() methods of plugins ...")
local status = nil
local redirect = nil
for i, plugin_id in ipairs(order.access) do
	-- Require call
	local plugin_lua, err = helpers.require_plugin(plugin_id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	elseif plugin_lua == nil then
		logger:log(ngx.INFO, err)
	else
		-- Check if plugin has access method
		if plugin_lua.access ~= nil then
			-- New call
			local ok, plugin_obj = helpers.new_plugin(plugin_lua, ctx)
			if not ok then
				logger:log(ngx.ERR, plugin_obj)
			else
				local ok, ret = helpers.call_plugin(plugin_obj, "access")
				if not ok then
					logger:log(ngx.ERR, ret)
				elseif not ret.ret then
					logger:log(ngx.ERR, plugin_id .. ":access() call failed : " .. ret.msg)
				else
					logger:log(ngx.INFO, plugin_id .. ":access() call successful : " .. ret.msg)
				end
				if ret.status then
					if ret.status == utils.get_deny_status(ctx) then
						ctx.bw.reason = plugin_id
						logger:log(ngx.WARN, "denied access from " .. plugin_id .. " : " .. ret.msg)
					else
						logger:log(ngx.NOTICE, plugin_id .. " returned status " .. tostring(ret.status) .. " : " .. ret.msg)
					end
					status = ret.status
					break
				elseif ret.redirect then
					logger:log(ngx.NOTICE, plugin_id .. " redirect to " .. ret.redirect .. " : " .. ret.msg)
					redirect = ret.redirect
					break
				end
			end
		else
			logger:log(ngx.INFO, "skipped execution of " .. plugin_id .. " because method access() is not defined")
		end
	end
end
logger:log(ngx.INFO, "called access() methods of plugins")

-- Save ctx
ngx.ctx = ctx

logger:log(ngx.INFO, "access phase ended")

-- Return status if needed
if status then
	return ngx.exit(status)
end

-- Redirect if needed
if redirect then
	return ngx.redirect(redirect)
end

return true

}