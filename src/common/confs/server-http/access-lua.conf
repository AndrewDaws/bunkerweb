access_by_lua_block {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local datastore		= require "bunkerweb.datastore"

-- Don't process internal requests
logger:new("ACCESS")
if ngx.req.is_internal() then
	logger:log(ngx.INFO, "skipped access phase because request is internal")
	return true
end

-- Start access phase
datastore:new()
logger:log(ngx.INFO, "access phase started")

-- Process bans as soon as possible
local ok, reason = cachestore:get("bans_ip_" .. ngx.var.remote_addr)
if not ok and reason then
	logger:log(ngx.INFO, "error while checking if client is banned : " .. reason)
	return false
else reason then
	logger:log(ngx.WARN, "IP " .. ngx.var.remote_addr .. " is banned with reason : " .. reason)
	return ngx.exit(utils.get_deny_status())
end

-- Get plugins
local plugins, err = datastore:get("plugins")
if not plugins then
	logger:log(ngx.ERR, "can't get plugins from datastore : " .. err)
	return false
end

-- Call access() methods
logger:log(ngx.INFO, "calling access() methods of plugins ...")
for i, plugin in ipairs(plugins) do
	local plugin_lua, err = helpers.new_plugin(plugin.id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	else
		logger:log(ngx.INFO, err)
	end
	if plugin_lua ~= nil then
		local ok, ret = helpers.call_plugin(plugin_lua, "access")
		if ok == false then
			logger:log(ngx.ERR, ret)
		elseif ok == nil then
			logger:log(ngx.INFO, ret)
		else
			if ret.ret then
				logger:log(ngx.INFO, plugin.id .. ":access() call successful : " .. ret.msg)
				if ret.status then
					if ret.status == utils.get_deny_status() then
						ngx.ctx.reason = plugin.id
						logger:log(ngx.WARN, "denied access from " .. plugin.id .. " : " .. err)
					else
						logger:log(ngx.NOTICE, plugin.id .. " returned status " .. tostring(value) .. " : " .. err)
					end
					ngx.ctx.status = ret.status
					break
				end
			else
				logger:log(ngx.ERR, plugin.id .. ":access() call failed : " .. ret.msg)
			end
		end
	end
end
logger:log(ngx.INFO, "called access() methods of plugins")

-- Save session if needed
local ok, err = utils.save_session()
if not ok then
	logger:log(ngx.ERR, "can't save session : " .. err)
end

logger:log(ngx.INFO, "access phase ended")

-- Return status if needed
if ngx.ctx.status then
	return ngx.exit(ret.status)
end

return true


local logger		= require "logger"
local datastore		= require "datastore"
local plugins		= require "plugins"
local utils			= require "utils"
local redisutils	= require "redisutils"

-- Don't process internal requests
if ngx.req.is_internal() then
	logger.log(ngx.INFO, "ACCESS", "Skipped access phase because request is internal")
	return
end

logger.log(ngx.INFO, "ACCESS", "Access phase started")

-- Process bans as soon as possible
local banned = nil
-- Redis case
local use_redis	= utils.get_variable("USE_REDIS")
if use_redis == "yes" then
	local redis_banned, reason = redisutils.ban(ngx.var.remote_addr)
	if redis_banned == nil then
		logger.log(ngx.ERR, "ACCESS", "Error while checking ban from redis, falling back to local : " .. reason)
	elseif not redis_banned then
		banned = false
	else
		banned = reason
	end
end
-- Local case
if banned == nil then
	local reason, err = datastore:get("bans_ip_" .. ngx.var.remote_addr)
	if reason then
		banned = reason
	else
		banned = false
	end
end
-- Deny request
if banned then
	logger.log(ngx.WARN, "ACCESS", "IP " .. ngx.var.remote_addr .. " is banned with reason : " .. banned)
	ngx.exit(utils.get_deny_status())
end

-- List all plugins
local list, err = plugins:list()
if not list then
	logger.log(ngx.ERR, "ACCESS", "Can't list loaded plugins : " .. err)
	list = {}
end

-- Call access method of plugins
for i, plugin in ipairs(list) do
	local ret, plugin_lua = pcall(require, plugin.id .. "/" .. plugin.id)
	if ret then
		local plugin_obj = plugin_lua.new()
		if plugin_obj.access ~= nil then
			logger.log(ngx.INFO, "ACCESS", "Executing access() of " .. plugin.id)
			local ok, err, ret, value = plugin_obj:access()
			if not ok then
				logger.log(ngx.ERR, "ACCESS", "Error while calling access() on plugin " .. plugin.id .. " : " .. err)
			else
				logger.log(ngx.INFO, "ACCESS", "Return value from " .. plugin.id .. ".access() is : " .. err)
			end
			if ret then
				if type(value) == "number" then
					if value == utils.get_deny_status() then
						logger.log(ngx.WARN, "ACCESS", "Denied access from " .. plugin.id .. " : " .. err)
						ngx.var.reason = plugin.id
					else
						logger.log(ngx.NOTICE, "ACCESS", plugin.id .. " returned status " .. tostring(value) .. " : " .. err)
					end
					return ngx.exit(value)
				else
					return value
				end
			end
		else
			logger.log(ngx.INFO, "ACCESS", "access() method not found in " .. plugin.id .. ", skipped execution")
		end
	end
end



logger.log(ngx.INFO, "ACCESS", "Access phase ended")

}