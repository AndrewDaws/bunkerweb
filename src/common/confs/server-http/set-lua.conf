set $dummy_set "";
set_by_lua_block $dummy_set {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local datastore		= require "bunkerweb.datastore"
local cachestore	= require "bunkerweb.cachestore"

-- Don't process internal requests
logger:new("SET")
if ngx.req.is_internal() then
	logger:log(ngx.INFO, "skipped access phase because request is internal")
	return true
end

-- Start set phase
datastore:new()
logger:log(ngx.INFO, "set phase started")

-- Update cachestore only once and before any other code
cachestore:new()
local ok, err = cachestore.cache:update()
if not ok then
	logger:log(ngx.ERR, "can't update cachestore : " .. err)
end

-- Get plugins
local plugins, err = datastore:get("plugins")
if not plugins then
	logger:log(ngx.ERR, "can't get plugins from datastore : " .. err)
	return false
end

-- Call set() methods
logger:log(ngx.INFO, "calling set() methods of plugins ...")
for i, plugin in ipairs(plugins) do
	local plugin_lua, err = helpers.new_plugin(plugin.id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	else
		logger:log(ngx.INFO, err)
	end
	if plugin_lua ~= nil then
		local ok, ret = helpers.call_plugin(plugin_lua, "set")
		if ok == false then
			logger:log(ngx.ERR, ret)
		elseif ok == nil then
			logger:log(ngx.INFO, ret)
		else
			if ret.ret then
				logger:log(ngx.INFO, plugin.id .. ":set() call successful : " .. ret.msg)
			else
				logger:log(ngx.ERR, plugin.id .. ":set() call failed : " .. ret.msg)
			end
		end
	end
end
logger:log(ngx.INFO, "called set() methods of plugins")

return true

}