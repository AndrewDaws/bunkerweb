ssl_certificate_by_lua_block {
	local class         = require "middleclass"
	local clogger       = require "bunkerweb.logger"
	local helpers       = require "bunkerweb.helpers"
	local utils         = require "bunkerweb.utils"
	local cdatastore    = require "bunkerweb.datastore"
	local cclusterstore = require "bunkerweb.clusterstore"
	local cjson         = require "cjson"

	-- Don't process internal requests
	local logger        = clogger:new("SSL-CERTIFICATE")
	if ngx.req.is_internal() then
		logger:log(ngx.INFO, "skipped ssl_certificate phase because request is internal")
		return true
	end

	-- Start access phase
	local datastore = cdatastore:new()
	logger:log(ngx.INFO, "ssl_certificate phase started")

	-- Fill ctx
	logger:log(ngx.INFO, "filling ngx.ctx ...")
	local ok, ret, errors, ctx = helpers.fill_ctx()
	if not ok then
		logger:log(ngx.ERR, "fill_ctx() failed : " .. ret)
	elseif errors then
		for i, error in ipairs(errors) do
			logger:log(ngx.ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
		end
	end
	logger:log(ngx.INFO, "ngx.ctx filled (ret = " .. ret .. ")")

	-- Get plugins order
	local order, err = datastore:get("plugins_order", true)
	if not order then
		logger:log(ngx.ERR, "can't get plugins order from datastore : " .. err)
		return
	end

	-- Call ssl_certificate() methods
	logger:log(ngx.INFO, "calling ssl_certificate() methods of plugins ...")
	local status = nil
	local redirect = nil
	for i, plugin_id in ipairs(order.ssl_certificate) do
		-- Require call
		local plugin_lua, err = helpers.require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ngx.ERR, err)
		elseif plugin_lua == nil then
			logger:log(ngx.INFO, err)
		else
			-- Check if plugin has access method
			if plugin_lua.ssl_certificate ~= nil then
				-- New call
				local ok, plugin_obj = helpers.new_plugin(plugin_lua, ctx)
				if not ok then
					logger:log(ngx.ERR, plugin_obj)
				else
					local ok, ret = helpers.call_plugin(plugin_obj, "ssl_certificate")
					if not ok then
						logger:log(ngx.ERR, ret)
					elseif not ret.ret then
						logger:log(ngx.ERR, plugin_id .. ":ssl_certificate() call failed : " .. ret.msg)
					else
						logger:log(ngx.INFO, plugin_id .. ":ssl_certificate() call successful : " .. ret.msg)
						if ret.cert then
							
						end
					end
				end
			else
				logger:log(ngx.INFO, "skipped execution of " .. plugin_id .. " because method access() is not defined")
			end
		end
	end
	logger:log(ngx.INFO, "called access() methods of plugins")

	-- Save ctx
	ngx.ctx = ctx

	logger:log(ngx.INFO, "access phase ended")

	-- Return status if needed
	if status then
		return ngx.exit(status)
	end

	-- Redirect if needed
	if redirect then
		return ngx.redirect(redirect)
	end

	return true
}
