header_filter_by_lua_block {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local cdatastore	= require "bunkerweb.datastore"
local cjson         = require "cjson"

-- Start set phase
local logger = clogger:new("HEADER")
local datastore = cdatastore:new()
logger:log(ngx.INFO, "header phase started")

-- Fill ctx
logger:log(ngx.INFO, "filling ngx.ctx ...")
local ok, ret, errors, ctx = helpers.fill_ctx()
if not ok then
	logger:log(ngx.ERR, "fill_ctx() failed : " .. ret)
elseif errors then
	for i, error in ipairs(errors) do
		logger:log(ngx.ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
	end
end
logger:log(ngx.INFO, "ngx.ctx filled (ret = " .. ret .. ")")

-- Get plugins order
local order, err = datastore:get("plugins_order", true)
if not order then
	logger:log(ngx.ERR, "can't get plugins order from datastore : " .. err)
	return
end

-- Call header() methods
logger:log(ngx.INFO, "calling header() methods of plugins ...")
for i, plugin_id in ipairs(order.header) do
	-- Require call
	local plugin_lua, err = helpers.require_plugin(plugin_id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	elseif plugin_lua == nil then
		logger:log(ngx.INFO, err)
	else
		-- Check if plugin has header method
		if plugin_lua.header ~= nil then
			-- New call
			local ok, plugin_obj = helpers.new_plugin(plugin_lua, ctx)
			if not ok then
				logger:log(ngx.ERR, plugin_obj)
			else
				local ok, ret = helpers.call_plugin(plugin_obj, "header")
				if not ok then
					logger:log(ngx.ERR, ret)
				elseif not ret.ret then
					logger:log(ngx.ERR, plugin_id .. ":header() call failed : " .. ret.msg)
				else
					logger:log(ngx.INFO, plugin_id .. ":header() call successful : " .. ret.msg)
				end
			end
		else
			logger:log(ngx.INFO, "skipped execution of " .. plugin_id .. " because method header() is not defined")
		end
	end
end
logger:log(ngx.INFO, "called header() methods of plugins")

-- Save ctx
ngx.ctx = ctx

return true

}