log_by_lua_block {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local datastore		= require "bunkerweb.datastore"

-- Start log phase
logger:new("LOG")
datastore:new()
logger:log(ngx.INFO, "log phase started")

-- Get plugins
local plugins, err = datastore:get("plugins")
if not plugins then
	logger:log(ngx.ERR, "can't get plugins from datastore : " .. err)
	return false
end

-- Call log() methods
logger:log(ngx.INFO, "calling log() methods of plugins ...")
for i, plugin in ipairs(plugins) do
	local plugin_lua, err = helpers.new_plugin(plugin.id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	else
		logger:log(ngx.INFO, err)
	end
	if plugin_lua ~= nil then
		local ok, ret = helpers.call_plugin(plugin_lua, "log")
		if ok == false then
			logger:log(ngx.ERR, ret)
		elseif ok == nil then
			logger:log(ngx.INFO, ret)
		else
			if ret.ret then
				logger:log(ngx.INFO, plugin.id .. ":log() call successful : " .. ret.msg)
			else
				logger:log(ngx.ERR, plugin.id .. ":log() call failed : " .. ret.msg)
			end
		end
	end
end
logger:log(ngx.INFO, "called log() methods of plugins")

-- Display reason at info level
if ngx.ctx.reason then
	logger:log(ngx.INFO, "client was denied with reason : " .. reason)
end

logger:log(ngx.INFO, "log phase ended")

}